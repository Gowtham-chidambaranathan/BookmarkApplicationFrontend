{"ast":null,"code":"var _jsxFileName = \"/Users/rchowdary/rgs/src/Bookmark/components/CreateBookmark.js\";\nimport React from \"react\";\nimport TextField from \"../../common/TextField\";\nimport { CategoryFormStyled } from \"../../Category/components/Category.styled\";\nimport { Button } from \"react-bootstrap\";\nexport default class CreateBookmark extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changeHandler = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.validate = () => {\n      let urlError = \"\";\n\n      if (!this.state.urlName.length) {\n        urlError = \"URL Name cannot be blank!\";\n      }\n\n      if (urlError) {\n        this.setState({\n          urlError\n        });\n        return false;\n      }\n\n      return true;\n    };\n\n    this.submitHandler = e => {\n      e.preventDefault();\n      const isValid = this.validate();\n\n      if (isValid) {\n        console.log(this.state);\n      } else {\n        alert(\"Cannot be created!\");\n      }\n    };\n\n    this.state = {\n      urlName: \"\"\n    };\n  }\n\n  render() {\n    return React.createElement(CategoryFormStyled, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Create\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/rchowdary/rgs/src/Bookmark/components/CreateBookmark.js"],"names":["React","TextField","CategoryFormStyled","Button","CreateBookmark","Component","constructor","props","changeHandler","e","setState","target","name","value","validate","urlError","state","urlName","length","submitHandler","preventDefault","isValid","console","log","alert","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,kBAAT,QAAmC,2CAAnC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,eAAe,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AAC1DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBC,aAPmB,GAOHC,CAAC,IAAI;AACnB,WAAKC,QAAL,CAAc;AAAE,SAACD,CAAC,CAACE,MAAF,CAASC,IAAV,GAAiBH,CAAC,CAACE,MAAF,CAASE;AAA5B,OAAd;AACD,KATkB;;AAAA,SAUnBC,QAVmB,GAUR,MAAM;AACf,UAAIC,QAAQ,GAAG,EAAf;;AACA,UAAI,CAAC,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,MAAxB,EAAgC;AAC9BH,QAAAA,QAAQ,GAAG,2BAAX;AACD;;AACD,UAAIA,QAAJ,EAAc;AACZ,aAAKL,QAAL,CAAc;AAAEK,UAAAA;AAAF,SAAd;AACA,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KApBkB;;AAAA,SAqBnBI,aArBmB,GAqBHV,CAAC,IAAI;AACnBA,MAAAA,CAAC,CAACW,cAAF;AACA,YAAMC,OAAO,GAAG,KAAKP,QAAL,EAAhB;;AACA,UAAIO,OAAJ,EAAa;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAjB;AACD,OAFD,MAEO;AACLQ,QAAAA,KAAK,CAAC,oBAAD,CAAL;AACD;AACF,KA7BkB;;AAGjB,SAAKR,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGD;;AAwBDQ,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,QAAQ,EAAE,KAAKN,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF,CADF;AAQD;;AAxCyD","sourcesContent":["import React from \"react\";\nimport TextField from \"../../common/TextField\";\nimport { CategoryFormStyled } from \"../../Category/components/Category.styled\";\nimport { Button } from \"react-bootstrap\";\n\nexport default class CreateBookmark extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      urlName: \"\"\n    };\n  }\n  changeHandler = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  validate = () => {\n    let urlError = \"\";\n    if (!this.state.urlName.length) {\n      urlError = \"URL Name cannot be blank!\";\n    }\n    if (urlError) {\n      this.setState({ urlError });\n      return false;\n    }\n    return true;\n  };\n  submitHandler = e => {\n    e.preventDefault();\n    const isValid = this.validate();\n    if (isValid) {\n      console.log(this.state);\n    } else {\n      alert(\"Cannot be created!\");\n    }\n  };\n  render() {\n    return (\n      <CategoryFormStyled>\n        <form onSubmit={this.submitHandler}>\n          <TextField />\n          <Button type=\"submit\">Create</Button>\n        </form>\n      </CategoryFormStyled>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}